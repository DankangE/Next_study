// import type { Metadata } from "next";
// import localFont from "next/font/local";
// import "./globals.css";
// // import Sidebar from "../layouts/sidebar"; // Sidebar 컴포넌트
// import Sidebar_antd from "../layouts/sidebar_antd"; // Sidebar 컴포넌트
// import Navbar from "../layouts/header"; // Sidebar 컴포넌트
// import Footer from "../layouts/footer"; // Footer 컴포넌트
// import { ThemeProvider } from "../layouts/darkmode"; // ThemeContext에서 ThemeProvider 임포트

// const geistSans = localFont({
//   src: "./fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
//   weight: "100 900",
// });
// const geistMono = localFont({
//   src: "./fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="ko">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//         style={{
//           display: "flex",
//           flexDirection: "column",
//           minHeight: "100vh", // 화면 전체 높이를 채우기 위해 설정
//         }}
//       >
//         {/* Header */}
//         <ThemeProvider>
//           <header style={{}}>
//             {/* Navbar */}
//             <Navbar />
//           </header>

//           {/* Main Content */}
//           <div style={{ display: "flex", flex: 1 }}>
//             {/* Sidebar */}
//             {/* <Sidebar /> */}
//             <Sidebar_antd />
//             {/* Children (Main Content Area) */}
//             <main style={{ flex: 1, padding: "1rem" }}>{children}</main>
//           </div>
//         </ThemeProvider>
//         {/* Footer */}
//         <footer style={{}}>
//           <Footer />
//         </footer>
//       </body>
//     </html>
//   );
// }

//SSR 안됨 ㅠㅠ

import { createCache, extractStyle, StyleProvider } from "@ant-design/cssinjs";
// import type Entity from "@ant-design/cssinjs/es/Cache";
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
// import Sidebar from "../layouts/sidebar"; // Sidebar 컴포넌트
import Sidebar_antd from "../layouts/sidebar_antd"; // Sidebar 컴포넌트
import Navbar from "../layouts/header"; // Sidebar 컴포넌트
import Footer from "../layouts/footer"; // Footer 컴포넌트
import { ThemeProvider } from "../layouts/darkmode"; // ThemeContext에서 ThemeProvider

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // SSR Render
  // const cache = React.useMemo<Entity>(() => createCache(), []);
  const cache = createCache();

  // Grab style from cache
  const styleText = extractStyle(cache);

  return (
    <html lang="ko">
      <head>${styleText}</head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        style={{
          display: "flex",
          flexDirection: "column",
          minHeight: "100vh", // 화면 전체 높이를 채우기 위해 설정
        }}
      >
        {/* Header */}
        <ThemeProvider>
          <StyleProvider cache={cache}>
            <header>
              {/* Navbar */}
              <Navbar />
            </header>

            {/* Main Content */}
            <div style={{ display: "flex", flex: 1 }}>
              <Sidebar_antd />
              {/* Children (Main Content Area) */}
              <main style={{ flex: 1, padding: "1rem" }}>{children}</main>
            </div>
          </StyleProvider>
        </ThemeProvider>
        {/* Footer */}
        <footer style={{}}>
          <Footer />
        </footer>
      </body>
    </html>
  );
}
